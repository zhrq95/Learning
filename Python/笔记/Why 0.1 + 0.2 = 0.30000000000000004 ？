Why 0.1 + 0.2 = 0.30000000000000004 ？

python中：
>>> 10.0 / 3
3.3333333333333335

这是为了避免 0.3333... 一直循环下去，Python 武断终结了循环，但是，并没有按照“四舍五入”的原则终止。

还会有更奇葩的：
>>> 0.1 + 0.2
0.30000000000000004
>>> 0.1 + 0.1 + 0.1 - 0.3
5.551115123125783e-17
>>> 0.1 + 0.1 - 0.2
0.0
>>> 0.1 + 0.1 + 0.1 - 0.2
0.10000000000000003

其原因在于十进制和二进制的转换上，计算机先要把十进制的数转化为二进制，然后再计算。
但是，在转化中，浮点数转化为二进制，就出问题了，例如：
十进制的 0.1，转化为二进制是：0.0001100110011001100110011001100110011001100110011...
也就是说，转化为二进制后，不会精确等于十进制的 0.1。
同时，计算机存储的位数是有限制的，所以，就出现上述现象了。

这种问题不仅仅是 Python 中有，所有支持浮点数运算的编程语言都会遇到，它不是 Python 的 bug ~
