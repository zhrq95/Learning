CPU 内部有指令 cache（一级缓存、二级缓存、三级缓存），为了提高运行效率，会将当前指令的相邻指令 cache 在 CPU 的高速缓存中。
顺序执行时，cache 指令的命中效率高，执行时速度快；
跳转语句时，程序跳到其他部分取执行，当前指令的 cache 可能会被清理然后重新加载其他指令，所以速度会慢一些。
编写 高性能的程序少使用跳转语句。
函数调用、循环、条件语句、goto语句都有跳转。

if 语句实例：
#include 
#include 
int main(int argc, char** argv){
int a = 2;
int b = -2;
//C/C++里：=表示赋值， ==表示值相等
if((a+b)==1){
printf("1\n");
}
//当一个数字作为判断的条件时，0为假，非0为真，
else if(0){
printf("2\n");
}
//如果 if 括号里面的条件是赋值，则先赋值，再算是否满足条件
else if(a=0){
printf("3\n");
}
else{
printf("4\n");
}
system("pause");
return 0;
}
此实例输出为: 4

goto语句
实质：跳转指令指针到指定的地方
要点：
1、定义一个指定的位置，语法为 名称：
2、在恰当的地方执行goto语句

for 循环
for(初始化循环变量;循环条件;更新循环变量){
循环体;
}
初始化循环变量;循环条件;更新循环变量，这几个如果没有可以不用写，但分号;一定要加上

控制循环的语句
1、终止本次循环（continue 后面的循环体都不执行了）：continue
2、跳出循环（跳出循环的指令范围）：break
注：
对于 for 循环来说，更新循环变量部分是不受 continue 影响的；但 break 后不会继续更新循环变量了。
例：
i = 0;
while(i<10){
if(i==5){
continue
}
printf("%d",i);
i++;
}
这个实例会输出：1234 然后进入死循环（因为 i==5 后直接跳出本次循环，不再进行 i++ 这步）

switch 语句：
switch(变量){
case 常量1:
break;
case 常量2:
break;
case 常量3:
break;
default:
break;
}

switch 语句原理是跳转到 caseX 位置执行剩下所有的语句（包括其他 case 里面的），直到最后或者遇见 break 为止。
因此在每一条语句最后 +break 即可。
因此某个 case 不加 break 的话将会执行跳转到的 caseX 本身以及以下所有的语句,直到遇到一个 break，或整个 switch 结束。

switch 查找速度比 if else 快，因为 switch 的每个 case 是常量，所以编译器会对 case 排序，然后折半查找，if else 是一一查找。


特殊表达式：

i++：先使用 i 的值计算，最后在将 i 加上 1；
++i：先将 i 的值加上 1，然后再放到表达式里面计算。
例1：
int a = 3;
int b = 4;
int c = a++ +b;
printf("c=%d，a=%d",c,a); //结果输出为 c=7，a=4
例2：
int a = 3;
int b = 4;
int c = ++a +b;
printf("c=%d，a=%d",c,a); //结果输出为 c=8，a=4

a+=b;a-=b;a*=b;a/=b;
等同于 a = a 运算符(+-*/) b

条件赋值表达式：
a = (逻辑表达式)? value1:value2;
逻辑表达式为真则 a=value1；逻辑表达式为假则 a=value2。
if else 会导致 CPU cache 指令跳转，而条件赋值表达式不会，因此其速度更快。
