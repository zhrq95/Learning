C 语言为了解决一个字符串的长度信息问题，使用特定标记符号（空字符即 '\0'，其 ASICC 码值为 0）作为一串字符的结束标记。

内存里面 hello 的存放如下：
'h','e','l','l','o','\0'

C 语言将字符存于数组，数组是一种分配内存的方式。
例：
char str[6]={'h','e','l','l','o','\0'}
char str[6]={'h','e','l','l','o', 0}
char str[]={'h','e','l','l','o','\0'}
char str[20]={'h','e','l','l','o','\0'}
如果没有 '\0' 则会一直向后输出随机的内存数据，直到遇到一个随机出现的 '\0'。

一个字符串只要遇到 '\0'或者 0 就会结束，不管后面还有没有内容
如：
char he[16]={'h','e','l','l','o','\0','w','t','f'};
只会输出 hello

只需要一个字符串的起始地址，就能够获得一个字符串的对象。
如：
char* ptr = he+3;
printf("%s",ptr);
会输出 lo

<strong>常数、常量字符串</strong>
1、常数、常量字符串内存是分配在代码段上（不管是定义在全局还是局部），会编译到可执行文件，然后随着代码加载到内存里面。
用二进制编辑器打开 exe 文件直接可以看到常量、字符串常量的二进制表示。
2、代码段是只读的，不允许修改，因此
char* ptr = "hello";
ptr[0] = 't';
是错误的。
2、定义常量字符串的语法："字符内容"，它的存储方式也是字符加结尾符号。
3、如果定义两个一样的常量字符串，编译器会使用同一个内存地址

