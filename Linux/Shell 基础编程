

指定选用何种 shell 作为该脚本的解释器：
#!/bin/bash

shell 脚本的执行方式：
将脚本保存为 demo.sh
1、方法一：
在脚本文件的最开头添加语句：
#!/bin/bash
然后给 shell 脚本文件添加可执行权限：
chmod u+x demo.sh
./demo.sh
2、方法二：
没给 shell 脚本赋执行权限时，可显式指定 shell 命令
bash demo.sh

变量命名：变量名 = 变量值
变量的引用：$变量名
清除变量的内容：unset 变量名
查看变量的值：set
输出用户自定义变量为环境变量（全局变量）：export 用户自定义的变量

例：
$ x = “hello welcome” #定义变量 x 并赋值
$ bash #创建子 bash
$ echo $x #在这个子 bash 中变量 x 未定义，无显示
$ exit #退出子 bash
$ export x #将变量 x 输出为环境变量
$ bash
$ echo $x #这时将显示变量 x 的值为 “hello welcome”
$ x = “Linux” #定义子 bash 中同名局部变量 x，并赋值 “Linux”
$ echo $x #显示局部变量 x 的值，显示为 “Linux”
$ exit #退出子 bash
$ echo $x #显示环境变量 x 的值 “hello welcome”

环境变量 PS1，用于临时设置命令提示符：
\w 当前工作目录
\h 主机名
\u 用户名
\d 日期
\t 时间
\a 响铃提示
例如：
$PS1=”\w>” 设置命令提示符为当前目录与字符 “>”

命令替换：
语法一：var=$(command)
语法二：’var’=’command’
将 command 命令的运行结果赋给变量 var
例如：
$echo “User $(whoami) is on $(hostname)”
$echo “Today is”‘date’
